/* ===| pChess Change Log |=====A vulgar mechanick can practice what he has been taught or seen done, but if he is in error, he knows not how to find it out and correct it;... Whereas he that is able to reason nimbly and judiciously about figure, force, and motion, is never at rest till he gets over every rub. (Isaak Newton, in a letter to Nathaniel Hawes) >> pChess 0.1 (started on: July 11, 2009)	> JRP: started writting a chess programme; new functions: 	- FN colVal()	- FN displayBoard()	- FN initBoard_classic()	- FN initBoard_fischer()	- FN initBoard()	- FN displayOverlay()	- FN pieceTree()	- FN parseMove()	- FN doMenus()	- FN doDialogs()	- FN initialize() >> pChess 0.2.3	> JRP: new function: FN makeMove()>> pChess 0.2.6 (august 20, 2009)	> JRP: new functions: FN mTree(), FN eval$(), FN dispPieceTree()>> pChess 0.2.9 - with the 'formidulator' engine (august 22, 2009)	> JRP: v0.2.9 is the last version to use a string-based mTree. 	because FB only allows 255 byte length strings, and each 	move pair + space = 3 bytes, we can only fit about ~80 moves 	into the move tree before running out of string space. 	to compensate for this, next version switches to an mTree array, 	with each pieceTree = 1 element in this array. >> pChess 0.7.7 (November 24, 2009: last FutureBasic 4 version of pChess)//-------------------------) FUTUREBASIC 5.5 (--------------------------//>> pChess 0.8.0february 9, 2010 (JRP): 	> start of new FutureBasic 5 baseline	> total rewrite from scratch. 	> using moveRecords and boardRecords	> write display FNs	> write move generation: now uses gBoard[0.63] instead of gBoard(1..8, 1..8)>> pChess 0.8.5march 26, 2010 (JRP): 	> FN negaSearch() -- first recursion!! 	the move was: a7a5>> pChess 0.8.9april 15, 2010 (JRP): 	> added ability to castle (however, it doesnt yet handle 	fischer or castle thru check). 	> fixed black pawn SE; it would capture from G-rank to H-rank 	due to testX bound checks. WRONG: long if testX>0 and testX<8 	and testY>0 and testY<9    //wtf - pawn no take queen on h6! 	RIGHT: long if testX>1 and testX<9 and testY>0 and testY<9>> pChess 0.9.4april 29, 2010 (JRP)	> added sortMoves() -- makes the recursion considerably faster (10x!!)	> added the ability to save game (still cant open though)>> pChess 0.9.12july 5, 2010 (JRP):      > disable opening book during FEN or Fischer:        initBoard_fischer(); fromFEN(): gUseBook=_false : menu 3,17,1     > new command in parseMove(): 'now' sets gMoveCount = gDisplayMove     > removed a bunch of unused variables:      + Warning:gcc:unused variable 'testSq' in fn 'makeMove'     + Warning:gcc:unused variable 'checkFlag' in fn 'quiescenceSearch'     + Warning:gcc:unused variable 'score' in fn 'computerSearch'     + Warning:gcc:unused variable 'n' in fn 'computerSearch'     + Warning:gcc:unused variable 'debugMoves_A' in fn 'computerSearch'     + Warning:gcc:unused variable 'testBoard' in fn 'computerMove'     + Warning:gcc:unused variable 'moveIndex' in fn 'computerMove'     + Warning:gcc:unused variable 'moveScore' in fn 'computerMove'     + Warning:gcc:unused variable 'betaScore' in fn 'computerMove'     + Warning:gcc:unused variable 'alphaScore' in fn 'computerMove'     + Warning:gcc:unused variable 'score' in fn 'computerMove'     + Warning:gcc:unused variable 'n' in fn 'computerMove'     + Warning:gcc:unused variable 'debugMoves_A' in fn 'computerMove'     + Warning:gcc:unused variable 'bookMatches' in fn 'computerMove'     + Warning:gcc:unused variable 'querySquare' in fn 'userMove'     + Warning:gcc:unused variable 'y2' in fn 'dispPieceTree'     + Warning:gcc:unused variable 'x2' in fn 'dispPieceTree'     + Warning:gcc:unused variable 'n' in fn 'parseMove'     + Warning:gcc:unused variable 'numMoves' in fn 'parseMove'     + Warning:gcc:unused variable 'querySquare' in fn 'parseMove'     + Warning:gcc:unused variable 'mvNum' in fn 'doMenus'     + Warning:gcc:unused variable 'n' in fn 'doMenus'     + Warning:gcc:'talk' may be used uninitialized in this function in fn 'speak'     + Warning:gcc:'r1Indx' may be used uninitialized in this function in fn 'initBoard_fischer'     + Warning:gcc:'kIndx' may be used uninitialized in this function in fn 'initBoard_fischer'     + Warning:gcc:'r2Indx' may be used uninitialized in this function in fn 'initBoard_fischer'     + Warning:gcc:'mvNum' may be used uninitialized in this function in fn 'saveFile'july 8, 2010 (JRP): 	> in: moves.incl, compiler inlining of FN local fn sq2X()		according to robert purves, this should greatly speed things up, 		since sq2X is called a lot in move generation (i.e. one of the 		most frequently called functions called from within negamax). 		greater speed gains could be had, if we rewrote the move generator		using 0-based indicies instead of 1-based indicies. then, we could		also inline the sq2Y() function -- for another significant speed boost. 			> in: pChess.bas, and declares.incl: added globals for vectors in kZone2(8), 		and kZone3(24)>> pChess 0.9.13july 12, 2010 (JRP)	> new primary eval function: kingGravity > in: eval.incl	- modified mobility score to include dynamic kingGravity score. 	- this includes changes in: pChess.bas > initialize() boardMasks. >> pChess 0.9.14july 15, 2010 (JRP)	> added ability to recognize and make enPassant moves -- now works!! :-D >> pChess 0.9.15july 22, 2010 (JRP)	> added some statistics about #moves and nodes searched. 	these are kept track in the globals: gMovesMade, gNodes, gqNodes		> enPassant Bug in pChess 0.9.14: 	- FEN: r2qkbnr/pppb1ppp/8/2pPp3/3nP3/2N5/PP3PPP/R1BQKBNR b KQkq	- move: c7c6, d5c6 (takes c6 AND c5 on a non-enpassant move!!)	- added in a test for theMove.fromSquare +/- 1 = board.enPassantSq	> removed bad roy lopez line from: pChess Book.txt	- BAD move (b5c6): Roy Lopez;e2e4 e7e5 g1f3 b8c6 f1b5 a7a6 b5c6 d7c6 e1g1july 23, 2010 (JRP)	> added check tests for castling. july 27, 2010 (JRP)	> added tests for enPassant. >> pChess 0.9.16 (ChessFest Edition)july 29, 2010	> chopped all opening lines to <256 characters (about 51 plies) in pChess Book.txt	- this had caused erroneous lines (which never matched, and never got played, 		except when peaBrain was asked to make the first move, upon which it 		sometimes played a crazy opening move like e5d4.. the code wasnt wrong,		we were just reading in lines > 256 chars, and they were overflowing		into erroneous array entries. july 31, 2010	> in: book.incl, added _rndBook switch to pick random openings (instead of LONGEST)august 21, 2010	> tuning of parameters for TORONTO ISLAND CHESSFEST (AUG.22; 4-7pm)	- in: declares.incl: changed weights of pawn evaluation:  	_wtPassedPawn = 44     'weight of Passed Pawn (was 88)	_wtDoubledPawn = 22     'Penalty for Doubled Pawn (was 44)		this was done, because in some games, it was observed that it would weigh 	pawn promotion too highly, and it would trade a pawn for a bishop. with the 	example FEN below, the score was -306 (worth three pawns/a bishop) before 	the change, and is -174 after the change (bad enough to be worth a pawn, 	but not to lose a knight or a bishop): 8/ppp1pppp/8/3p4/8/2P5/PPP1PPPP/8 w>> pChess 0.9.17 (zero-based move indicies)august 26, 2010	> a major rewrite of the move generator in: moves.incl to used 0..7 based 	board instead of the previous 1..8 based board. this allowed FN sq2X and sq2Y	to return zero-based results, and also be inlined by the compiler, 	in order to make the move generator work quite a bit faster. this also	meant modifying the FN mouseTrap, and most of the display.incl code	to compensate for sq2X and sq2Y now returning zero-based values. 		in testing, it was found in mate postions, a zero-move was generated, 	(such as: a1a1), and the results of the move-generator were not identical	to the previous version; thus -- BUGGY. it generates moves and all, but	somewhere there's a leak. :-p  i think its enpassant bounding bugs. 		i'm going to spin off this version, and continue the 0.9.16 baseline. 	the plan being to head off a functional 1.0 release (based on the 	0.9.16.. 0.9.18 lineage), and then start v1.1 with debugged 0.9.17 	code with back-ported features. 			>> pChess 0.9.18 (forked off of 0.9.16)september 11, 2010	> jrp: changed all window #2 > window output #2	this corrects some of the unresponsiveness of fn searchAborted()		> jrp: added support for a chess clock / user timing: 	+ FN timeAdd(tOne as str255, tTwo as str255) as str255	and fn computerMove() and fn userMove() to display the result. 	+dim as str255 startTime, endTime, elapsedTime		> jrp: added functions to support check, mate, and promotion sounds: 	+ fn PlayMovieSoundFromFSSpec( fs as ^FSSpec )	+ fn FSSpecFromSupportFileName( inName as Str255, outSpec as ^FSSpec )	in addition to including the sound files, these require include: 	+ include "Tlbx MoreFilesX.incl"; and the global boolean gPromotion has been 	added in makeMove() to keep track of if a promotion sound should be played. 		september 19, 2010	> jrp: added FN hintMove() - show's the computer's move without 	making it. changed menus; added 'hint' cmd to fn parseMove(). 	- do an Options > Clear Screen to reset the display. //------------------------| pChess 1.0 |-------------------------//>> pChess 1.0october 18, 2010	> jrp: display.incl; changed a bunch of if-then structures to select-case. october 20, 2010	> jrp: in FN doDialogs(), added select case for _wndClose -> quit app	as per brendan's request. :-D 		> jrp: in pChess.bas; added Options > 'Set NOW' menu item. 	the 'Set NOW' command sets the current move to be whatever move you happen	to be currently looking at in the display (having used PREV and NEXT). 	> jrp: removed 'FEN Auto-flip' from menu, as this should always occur. 	if the user wants to unflip it, choose the 'Flip' command after. october 22, 2010	> jrp: updated ReadMe file and cleaned up 'Cheq Font' directory. 	> jrp: declared it a 1.0 Release - YEA!! :-D 	//---------------------------------------------------------------//	>> pChess 1.0.1october 23, 2010	> jrp: added several new functions from robert purves related to saving preferences: 	- prefs.incl: CFPrefsGetApplicationID(); CFPrefsGetLong(); and CFPrefsSetLong(). 	- when passed a KEYstring and a value -- it will be read, and generated if necessary. 	> jrp: added FN quitPea() -- accessed from three places: 	i) quit command; ii) File > Quit; iii) Dialog() > Window Close clicked. 	this was done in order to ensure consistent preferences save on quit. october 26, 2010	> jrp: addded 'win' and 'win reset' commands, 	which give XY loc of window, and resets window to default location. 	> jrp: added global variables and preferences for items in Options menu. 	these will be loaded on startup; and saved on quit. >> pChess 1.0.2october 27, 2010	> jrp: you can now turn off the debug window. this was done by adding 	a whole lot of: 'if (gDebug == 1) then' to all window #2 statements.	this will keep the debug display from screwing up window #1 when debug 	is closed. also, closing the debug window now actually closes the debug 	window. the evaluation display in the main window now carries over some 	of the information that was only available in the debug (number of moves 	being evaluated, and which move it is on). >> pChess 1.0.3october 28, 2010	> jrp: white king castle moves are generated again (thanks brendan!). 	>> pChess 1.0.4october 28, 2010	> jrp: rethought the buttons in the interface. they are now: 	(-Move-)  (>FEN)  (<FEN)  < - > 	this allows you to move prev/next and SET NOW from buttons. //=================================// >> pChess 1.0.5 (Golden Child of 1.0)november 9,  2010	> JRP: major rewrite of the move generator (version bump 2.3 > 2.5). 	breakup the hairball into discrete piece functions > wPawnMoves(); bPawnMoves(); 	bishopMoves(); knightMoves; rookMoves(), and consolidated white-black evaluations 	by multiplying by -1 (i.e. pieceColour). this optimization reduced the code 	from 2362 lines down to 1245 lines (used the base code from 0.9.17 to do this). 	november 10, 2010	> JRP: added perft() diagnostic function (perft.incl) with corresponding	commandline usage: perft N -- where N is the depth to run. (thanks robert purves!) //=================================// 	>> pChess 1.0.6november 14, 2010	> JRP: added new attack-based move generator: attacks.incl	> JRP: rewrote generateCaptureMoves() to use new attack generator. november 15, 2010	> JRP: rewrote generateLegalMoves() to use new attack generator. 	the results are very disappointing -- the attack based generator actually 	INCREASES move generation time by 10 seconds from 1:04 to 1:14 (!!)  :-( 	i think most of the time is lost in bounds checking -- which leads me 	to believe that i must rewrite the move generator with maskBoards to	to do the bounds checking. 	>> pChess 1.0.7november 18, 2010	> JRP: added globals for a generic vector-based bishop move generator. 	this comprises two parts: i) a generic vector-feed for the piece move 	generators, and ii) maskBoards to replace explicit bounds checking. 	this reduced the number of lines from 1245 lines down to 568 lines. 	move generator version bumped from 2.5 > 3.0. if all this does provide 	the hoped for speedup, i will declare it pChess v1.1. 		also, i discovered a possible bug with the opening book. the line: 	g1f3 d7d5 b1c3 d5d4 d2d4 is wrong -- i think i readIn by 0..n array,	and then pick by 1..n array -- off by one, since the line is followed,	then the pick is n+1 in the text file. investigate. november 22, 2010	> JRP: finished rewriting attacks.incl to use vectors & maskBoards. 	this brings it down from 745 lines down to 360 lines. 	> BF: has changed the 1.0.5 move generator to select-case instead of if-then. 	this results in a speedup from 0:55 down to 0:35. we will have to rewrite	the 1.0.7 move generator again to take advantage of this optimization. >> pChess 1.0.8november 25, 2010	> JRP: added fn Microseconds()	this allows microsecond measurement in the perft() function. november 27, 2010	> JRP: As per suggestions by Robert Purves, Legal moves are now generated more	efficiently, resulting in much faster searches. For example, the FEN below	required 13 million moves which were mostly wasted in legality checking fn checkTest()	which was horribly inefficient. now they are tested with fn isLegalPosition() to yield 	the same result with only 499,586 moves - almost quadruple the speed! :-D 	FEN: rnb1kbnr/pppp1ppp/8/4p1q1/2P5/6P1/PP1PPP1P/RNBQKBNR w KQkq	v1.0.7: time: 00:06:29; moves: 137,059,677; nodes: 2,151,745; qui: 2,303,257	v1.0.8: time: 00:01:09; moves: 4,511,400;   nodes: 2,149,763; qui: 2,240,554	FEN: r1b1kb1r/p4ppp/2p5/1p2p1q1/2Qnn3/3P1N2/PPP2PPP/RN3K1R b kq	v1.0.7: 19secs; Moves Tested: 13,890,367; Nodes: 244,225; Qui Nodes: 184,147	v1.0.8: 48secs; Moves Tested: 449,586;    Nodes: 244,225; Qui Nodes: 183,985	FEN: r3k1r1/ppp1qppp/3bbn2/2p1p3/2P1P3/2PB1N2/PP1NQPPP/R3K2R b KQq	v1.0.7: 00:04:51; Moves Tested: 85,330,199; Nodes: 1,413,455; Qui Nodes: 2,549,583	v1.0.8: 00:01:14; Moves Tested: 3,971,040;  Nodes: 1,413,484; Qui Nodes: 2,542,083	FEN: r1bqk1nr/pppp1ppp/2n5/1Bb1p3/4P3/5N2/PPPP1PPP/RNBQK2R w KQkq	v1.0.7: 00:01:26; Moves Tested: 25,571,202; Nodes: 430,757; Qui Nodes: 744,553	v1.0.8: 00:00:23; Moves Tested: 1,208,637;  Nodes: 429,608; Qui Nodes: 725,928	FEN: r2q1rk1/pp2b1p1/1n1ppn1p/1Q2p3/4P3/2N1BN2/PPP2PPP/R4RK1 b -	v1.0.7: 00:05:54; Moves: 118,578,784; Nodes: 1,546,343; Qui: 3,901,745	v1.0.8: 00:01:16; Moves: 5,463,760; Nodes: 1,546,343; Qui: 3,883,927		>> pChess 1.1	december 1, 2010	> JRP: more compact display of: Moves, Nodes, and Quiesence nodes in Debug	> JRP: added FN activateFontFromResourceFile() -- this enables embedding 	the CHEQ FONT into the /Resources folder, so user no longer has to install. 	this has the downside that font embedding requires OSX 10.5.. 	bye bye OSX 10.4 -- it was nice knowin ya. :-[ 		> JRP: changed defaults: depth=5, and debug=OFF. 	december 2, 2010	> JRP: selecting: Options > Help will now display the debug window	before displaying help if the debug window was inactive. 	> JRP: in eval.incl, changed a bunch of if-then to select-case. december 6, 2010	> JRP: changed display.incl > fn gameHistory()	it now uses a mono-spaced font and tabs to get the movelist to line-up. 	looks much better this way (as opposed to the drunken wavy columns previously)> pChess 1.2.2december 12, 2010	> JRP: changes in declares.incl; added a whole bunch of battleVariables. 	> JRP: added initializations for these in pChess.bas > FN initialize_UI. 	> JPP: eval.incl bumped to v2.4; now uses global vars instead of constants. 		this prepares it for use with tournament mode. 		december 13, 2010	> JRP: added battle.incl, which includes FNs: loadBattle() and tournament()	- gDepth = gDepth1	- gFudgeWiggle = gFudge1	- gWtMobility = gMobility1	- gWtTropism = gWtTropism1	- gCastleBonus = gCastleBonus1	- gWtKingGravity = gWtKingGravity1	- gWtPassedPawn = gWtPassedPawn1	- gWtDoubledPawn = gWtDoubledPawn1// *** christmas holiday -- we wrote a v1.0 of CONNECT4 (dropFour) *** //// *** to test out negaMax in a different context ******************** //>> pChess 1.2.3december 19, 2010	> JRP: added fn algebraic2std() which translates algebraic to standard notation. 		this also entailed moving the o-o-o castling notation into the new function, 		and adding a constant _stdNotation which defaults on. still not wholly integrated.		the corresponding fn move2Std() is still in development. existing limitation		is that it does not yet disambiguate moves. 	> BF: added fn trim() which removes leading and trailing spaces from input. 		this is called in fn parseMove()>> pChess 1.2.4january 21, 2011	> JRP: there was a bug in computerMove() where it would call move2algebraic()	with a string already in StdMove format (instead of algebraic as it expects), 	and this would crash with dimension out of bounds [0..63]. fixed! 	> JRP: in moves.incl > wKingMoves(), and bKingMoves() -- code added 	to call fn isAttacked() -- you can no longer castle through check! :-D 	FEN: r3k2r/ppp2ppp/1qn2n2/1b1ppB2/1B1PPb2/1QN2N2/PPP2PPP/R3K2R w KQkq	FEN: r3k2r/ppp2ppp/2n1Bn2/b2pp3/QB1Pq1b1/5N2/PPP2PPP/R3K2R w KQkq		> JRP: in moves.incl and pChess.bas > global variable gIsInCheck = _true	when side2move is in check -- this will keep the king from castling out of check. 	i.e. you can no longer castle OUT OF check!! we are now fully legal!! :-D 	this means we now have legal move generation (well except 3x repetition). :-D 	> changes in performance for new check legal functions are negligable: 	perft 6 = 325.237secs (1.1) and 328.055secs (1.2.4) -- a hit of < 1% 	(delta of 2.8 seconds for 199,060,324 moves). january 24, 2011	> JRP: there was a lot of redundancy in FN generateCaptureMoves()	robert purves suggested extracting the 'attacks to moves assignments' 	into a seperate function: FN attacks2moves() -- makes the code cleaner. january 30, 2011	> JRP: in moves.incl, added the FN isTarget() -- it returns a list	of moves that that hit the querySquare, its scope can be limited by 	specifying a str255 with a pieceType (one of 'PRNBQK') -- this is 	prerequisite for FN move2Std() in order to disambiguate SAN moves. 	the parser has also been updated; you can query a square: ?c3B 	(would show all bishop moves of the current who2move that can target 	square c3). this is done via the new FN dispMoveToMoves(). 		> JRP: added _overLines = _True into FN cheqOverlay() -- if the constant 	is set, then overlays will include lines between the from-to squares. >> pChess 1.2.5february 5, 2011	> JRP: FN move2Std() now correctly disambiguates SAN moves!! woohoo! :-D 	this opens the door for reading .pgn files, and large opening libraries. february 6, 2011	> JRP: conversion of history code from gMoveList() as a str255 > moveRecords. 	changes in: globals; userMove(); computerMove(); display.incl > gameHistory()	storing the history as moveRecords instead of as algebraic str255 allows us	to choose whether to display algebraic or stadard notation in the history 	on the fly. it also adds the dependency that it will now use the gameBoards() 	this is necessary, because you cant display a move in standard notation without 	also having access to the board context in which the move is made. february 8, 2011	> JRP: got the FN move2Std() disambiguation working (mostly)!! :-D 	bug1: check for contents of square before declaring O-O castling. 	bug2: Ned4 works going in, but reports Nd4 going out (wrong!)		// fen: r2r2k1/pp1bbppp/2n1pn2/8/1PB5/P3PN2/1B2NPPP/2RR2K1 w -		// example2: our output is: Nd7, which is ambiguous, should be: Nbd7		// fen: rnbqkb1r/pp3p1p/3p1np1/2pP4/8/2N5/PP1NPPPP/R1BQKB1R b KQkq	bug3: disable debug window, and you have output issues. 	february 9, 2011	> JRP: wrote a saveFile() function -- it outputs similar to .pgn,	except because of str255 limitations, it puts each move on a new line. 	(incidentally, i think it clearer than cramming it all on one line, 	and we will have to use CF strings to address the str255 limitation). 	> JRP: wrote a corresponding openFile() function -- inputs close to .pgn 	except because of str255 limitations, it reads each move on a new line. 	it is very satisfying to see a standard .pgn file (with CR and LF added)	load up into pChess -- Spassky vs Fischer, Wch Reykjavik, Iceland, 1972. 	Curiously, I have noted that it is one year to the day that I started	the current FutureBasic 5 version of pChess -- one year aniversary! :-D 	(pChess 0.1 - 0.7.7 lasted from July 11, 2009 - November 24, 2009). february 10, 2011	> JRP: FN openFile() will now load fischer games (using FEN). 	although input loaded doesnt always match output saved due to 	some disambiguation bugs.. arrgh. 	february 12, 2011	> JRP: code for prev/next was replicated in: parseMove(), doDialogs(), 	and doMenus() --> this code is moved into display.incl as discrete FNs: 	prevMove(), nextMove(), firstMove(), lastMove() and setNow(), and naw  	includes display overlay functionality (which accesses gameBoards). >> pChess 1.3february 15, 2011	> JRP: Widescreen edition - Board is now 512 x 512, and the main 	window = golden rectangle (1:1.618). The debug window is no longer - it 	has been integrated into an extension of the main window, such that without, 	the main window is a square, and with, the main window is a golden rectangle. 	display.incl, and all other routines have been rewritten to get rid of 	all references to debug window #2. 	february 16, 2011	> JRP: lots of little tweaks to get the widescreen board working properly.	almost all the display and eval code blopped things back and forth between	window #1 and window #2, and every reference had to be removed, and amended	to behave properly in a single window context. february 17, 2011	> JRP: fn gameHistory() now includes SCROLLING. after 23 lines of moves,	it will scroll off the top of the list, and display up to the current move. 	this is tricky, because: i) number of moves displayed != numLines displayed; 	it depends on there being an odd or even number of lines with a remainder. 	ii) the RANGE to display is truncated at the beginning measured from last move. 	iii) to achieve consistent scrolling, we must compute a necessary OFFSET for 		any moves greater than a window of 46 moves (23 lines). looks simple, 		but it took three days of working out the interacting variables, and		splitting it into two problems: RANGE and OFFSET to get it right. february 18, 2011	> JRP: flipping the board during a mid-history display now flips the	board that is displayed (instead of the final move), and highlights 	the last move. find: this may also still need to be done for the 	commandline version of the FLIP command. 		> JRP: FN doMenus > menuID = 4, this was changed to generically set	the depth according to the itemID of the menu (instead of eight discrete	select-case statements, which was inelegant). 	> JRP: fixed a bug with enabling/disabling the debug pane - the window 	would reset to the default location as the pane was toggled. we needed	to make winX and winY into global variables, as well as recalling them	from the preferences file. 	> JRP: changed defaults back to: debug=ON. 		> JRP: a lot of functions still used: FN displayBoard( gBoard )	in many places, this is now changed to: FN displayBoard( gameBoards(gDispCount) )february 20, 2011	> JRP: there was a disambiguation bug in FN move2Std(). it would assume	that either the ranks or files would be the same -- not so with certain	knight situations -- and so, when both rank AND file differed, it would 	fail to provide the disambiguation info. this is now fixed! :-D 		// example: our output was: Nd7, which is ambiguous, should be: Nbd7	// fen: rnbqkb1r/pp3p1p/3p1np1/2pP4/8/2N5/PP1NPPPP/R1BQKB1R b KQkq>> pChess 1.4february 22, 2011	> JRP: added a new FN speakMove() -- which translates from a Std move string 	to an english-speakable string -- making spoken moves sound so much more sensible. 	still some bugs (e.g. pawn captures aren't correctly declared). 	> FN move2Std() had a bug; it reported castling moves whenever the move 	was: e1g1 or e1c1. it now tests to see if the fromPiece == 6 (a king). 	bug due to missing brackets when both OR and AND were being used. 	> bug: FN speakMove() doesnt properly report pawn disambiguation (fixed!)	february 23, 2011	> JRP: i was already working on 'audiobrain' for pChess - mapping move scores 	to pitch, but jon stokes system for mapping square values to note and octave 	makes too much sense - using Bflat for B, and Bnatural for the H column 	provides the missing link - i sense a new feature coming to pchess..   :-}	http://jonathanwstokes.com/2011/02/14/chess-music/>> pChess 1.5february 24, 2011	> JRP: added new FN audiobrain() with the above pitch mappings. 	new global: noteTable(63) holds the boardSq[0..63] to pitch conversion values. 	the audiobrain now has its own dedicated function in display.incl	called: fn audioBrainz(theMove as ^moveRecord, moveScore as long)	the theMove.fromSquare and theMove.toSquare are directly mapped to notes. 	and FN negaSearch() now points to the new function during cutoffs. 	at the same time, flipped the cutoffs for hyperview to by >3; this puts it	in sync with the audiobrain cutoffs, and greatly decreases the amount of	slowdown hyperview used to entail. february 25, 2011	> JRP: added the 'Audio Brain' to Options menu; and saved in preferences. 		> JRP: removed HELP from the OPTIONS menu, and removed FN showHelp(). 	users should instead consult the more extensive help in the ReadMe file. 	february 26, 2011	> JRP: changed the parser so that if you click on an empty square,	it will respond with how many moves target that square. this complements	the existing behaviour in that if you click an occupied square, it will 	show you the moves it can make. the explicit command: ?b3N still exists, 	so that you can scope the isTarget with a pieceType (in this case, 'N'). 		> JRP: The window now refreshes automatically if it was previously hidden. 	this was done by trapping the dialog event: _wndRefresh	> JRP: updated FN mouseTrap() to recognize gBoardStyle. 	this means the ascii board will now accept mouse clicks again. 	> JRP: added FN confirmDialogue() - necessary to check for save on exit. 	also added a new global: gDirtyFlag - this boolean signals unsaved changes. 	quitting or closing the pChess window will now confirm save before quit. 	you can use the <ESC> and <Enter> keys to pass through the dialogue. >> pChess 1.6march 3, 2011	> JRP: display.incl updated to v3.1 (Quartz compliant). all QuickDraw API	calls have been changed to Quartz API calls (excepting printing CHEQ Font). 	you will notice that the who2move spot is now nicely anti-aliased. :-D 	Quartz calls depend on the existence of the Quartz.incl (by Bernie Wylde). 	FNs updated: cheqBoard() cheqOverlay() mouseTrap() visualBrainz(). 	note: CHEQ font still uses: call MoveTo() and Print() --> update. march 6, 2011   > PGN Format Specification: http://www.tim-mann.org/Standard   |    | 4.3: Line lengths: PGN data are organized as simple text lines..    | Import format PGN text lines are limited to having a maximum    | of 255 characters per line including the newline character.    | Lines with 80 or more printing characters are strongly    | discouraged because of the difficulties experienced by    | common text editors with long lines.   |    | 8.2.2.2: Export format move number indications: A white move number    | indication is formed from the integer giving the fullmove number    | with a single period character appended. march 17, 2011 (FIND:BUGS)	> JRP: suggestions from RP to improve nodes-per-second by removing 	some superstitious initialisation in the following functions: 	- FN isAttacked() > del: for-next ; attackedSquares(0.._maxAttacks)	- FN generateCaptureMoves() > del: for-next ; attackedSquares(0.._maxMoves)	- FN isTarget() > del: blockZero( moves(0), sizeof( moveRecord ) )		- fen: r1nb1r1n/p3k2p/1p1q1pp1/1Bp1p3/4P3/1P6/PQPP3P/R3KRBN b -	- time without optimisations: 6:54 (20,046,832 moves)	- time with optimisations: 6:56 (20,046,832 moves)	> Bugs (RP, March 16, 2011): 	1. White can castle here, but pChess thinks it can't.	2k5/8/8/8/8/n7/8/R3K3 w Q - 0 1	Probable bug sources:	sqAttacked1 = fn isAttacked( 57, theBoard ) ???	sqAttacked1 = fn isAttacked( 1, theBoard ) ???	2. From this position: 2k5/8/8/8/8/6nR/8/4K2R b K - 0 1	play 1... Nxh1   2. Rxh1 Kc7	Now white cannot castle because the rook is not the original one, 	but pChess thinks it can. Probable bug source: When a rook is captured 	on its home square you have to clear the appropriate castling flag. 	3. From this position: 8/7p/p5pb/4k3/P1pPn3/8/P5PP/1rB2RK1 b - d3 0 28	Black should be able to play cxd3e.p. but pChess doesn't allow it. >> pChess 1.7 (Bookworm edition)march 24, 2011	> JRP: rewrote the opening book code to use Standard Algebraic Notation	(instead of Coordinate Algebraic notation). this allows use of the ECO 	encyclopedia of opening moves as our opening book.. functions that are 	affected are: computerMove(); userMove(); loadBook(); pickBook(); 	numWords(). global variables for the title of the opening move have been 	used (baaad bad!). we should just pass it in a bookRecord. our previous 	book had 737 openings; now we have more than 10,000 openings. :-}	> JRP: thanks to: Christopher Conkie (Scotland) for 'eco-arena-v03.xls'.	which provides the source for the ECO (Encyclopedia of Chess Openings). 	april 1, 2011	> JRP: updated the readme, and released as version 1.7. >> pChess 1.8 (Heavenly Hash edition)april 11, 2011	> Hash Tables, first pass based on RChess 3.0 hash tables. 	+ setup hash in declarations	+ added the hash.incl to the project	+ call initHashData from main	+ call initHashTable from computerMove()	april 27, 2011	+ add hash to search.incl	+ add hash to fn makeMove()	+ add FN putSuppliedMoveFirst()	- full hash support in FN makeMove() --> pawn & castling moves!!	- rewrite FN computerSearch() to use Iterative deepeningmay 8, 2011	> JRP: added _evalKingSafety to eval.incl, which is enabled with _wtKingShelter	- _evalKingSafety gives a bonus (gWtKingShelter, default = 6) for each pawn 	  in front of a castled king. 	- reduced the _wtPassedPawn from 44 down to 22; _wtDoubledPawn from 22 to 11. 	may 10, 2011	> JRP: tournament mode in battle.incl is now interuptable. 	it tests to see if (fn IsSearchAborted == _false), and terminates if _true. may 16, 2011	> JRP: optimized fn checkTest() by adding an exit next to the numReplies loop. 	[hindsite is 20-20; this changed fundamental behaviour, and was a serious bug!]may 28, 2011	> JRP: changed default weights of knight and bishop, such that 	the following conditions will occur: 		i)   B > N > 3P		ii)  B + N = R + 1.5P		iii) Q + P = 2R	thus: _bishopWt = 330; _knightWt = 320	as per: Tomasz Michniewski (ChessWiki; Progszach)	ChessWiki > Simplified Evaluation Function	may 29, 2011	> JRP: changed the default pawn tropism. 	as per: Tomasz Michniewski (Progszach)	ChessWiki > Simplified Evaluation Function		// old  WHITE PAWN TROPISM values	data 0, 0, 0, 0, 0, 0, 0, 0	data 0, 0, 0, 0, 0, 0, 0, 0	data 0, 20, 10, 20, 20, 10, 20, 0	data 0, 10, 10, 30, 30, 10, 10, 0	data 10, 20, 30, 50, 50, 30, 20, 10	data 40, 40, 50, 60, 60, 50, 40, 40	data 70, 70, 70, 70, 70, 70, 70, 70	data 0, 0, 0, 0, 0, 0, 0, 0	// new WHITE PAWN TROPISM values	data 0,  0,  0,  0,  0,  0,  0,  0 	data 5, 10, 10,-20,-20, 10, 10,  5	data 5, -5,-10,  0,  0,-10, -5,  5	dato 0,  0,  0, 20, 20,  0,  0,  0	data 5,  5, 10, 25, 25, 10,  5,  5	data 10, 10, 20, 30, 30, 20, 10, 10	data 50, 50, 50, 50, 50, 50, 50, 50	data  0,  0,  0,  0,  0,  0,  0,  0	> JRP: the 'optimization' that added the exit next	to the the numReplies loop in FN checkTest() broke	the function - a serious BUG! - REVERTED. may 30, 2011	> JRP: added a knightTropism function in Eval.incl. 	uses the values supplied by: Tomasz Michniewski. 	this affects: declares.incl, and fn initialize(). 	find: need to update fn battleLoad() to support this. 	> JRP: added code to bundle the Opening Book, and auto-load	at startup if the 'Use Opening Book" option is enabled. 	the file, 'Book.txt' (1.1Mb) is now bundled within the application. 	this also helps prepare us for the bundled world of the new apple app store. 	this has the consequence that you'll get load errors if you rename 	the application to something other than 'pChess'. 		> JRP: rewrote FN staticEval() > eval03hitsUs. pulled out the old 	numMoves; generateLegalMoves code, and replaced it with modern	references to FN isAttacked(). this function was extremely slow; 	now it is merelyy very slow; and it is still of dubious ELO value. june 6, 2011	JRP: moved the generation of root moves from FN compterMove()	into the FN computerSearch() in preparation for Iterative deepening. 	this also starts the process of separating GUI code from engine code. 		> JRP: changed FN cheqOverlay() so it will not display moves	when there are no moves, or the firstMove.fromSquare = firstMove.toSquare	this has the UI consequence that clicking a piece which has no moves, 	will no longer light up when clicked (no good; have to write a handler 	for single clicks). 		>> JRP: rewrote FN makeMove() to breakdown by pieceType. 	this should be faster, as we no longer have to perform high-frequency	tests for enPassant and castling if it is not a pawn or king move. 	test results: 	FEN: rnb1k2r/pp1ppp1p/8/3q1p2/2p5/2P1PN2/PQP2PPP/R3KB1R b KQkq	- v1.7d5: O-O, 3,060,384 moves / 0:00:50 time	- v1.8d5: Qc6, 433,548 moves / 0:00:07 time	thus, there seem to be some ERRORS; file retained, but moved off baseline. july 6, 2011	> JRP: a major milestone has been reached!! pea 1.8b5 has beat papa!!	| // pChess Game (version 1.8b5)	| // papa vs pea5 (0-1) july6.2011	| // Last position: 8/pp3p2/2k5/7R/1P2r2K/P6P/6r1/8 w -	| 	| 1. c3 c5	| 2. e3 Nc6	| 3. a3 Qc7	| 4. Bc4 Ne5	| 5. Bb3 Nd3+	| 6. Ke2 c4	| 7. Bc2 d5	| 8. Nf3 Bg4	| 9. Kf1 O-O-O	| 10. h3 Bxf3	| 11. gxf3 Qb6	| 12. Ke2 Nxc1+	| 13. Qxc1 e5	| 14. d4 cxd3+	| 15. Bxd3 e4	| 16. fxe4 dxe4	| 17. Bxe4 Qe6	| 18. Bf3 Qc4+	| 19. Ke1 Qa4	| 20. Rg1 Qh4	| 21. Bg4+ Kc7	| 22. Nd2 h5	| 23. Bf5 Ne7	| 24. Nf3 Qc4	| 25. Qc2 Nxf5	| 26. Qxf5 Qd5	| 27. Qf4+ Bd6	| 28. e4 Bxf4	| 29. exd5 Rxd5	| 30. Rxg7 Rd7	| 31. Nd4 Be5	| 32. Rg5 Bxd4	| 33. cxd4 Rxd4	| 34. Re5 Kd6	| 35. Re3 Rg8	| 36. Ke2 Rc8	| 37. b4 Rc2+	| 38. Kf3 Kd5	| 39. Rg1 Rdd2	| 40. Rg5+ Kc6	| 41. Rxh5 Rxf2+	| 42. Kg3 Rg2+	| 43. Kh4 Rc4+	| 44. Re4 Rxe4#july 21, 2011 (1.8 beta5)	> JRP: updated FN cheqOverlay() to process a single square if toSquare = fromSquare. 	** it is my sorrow to report that i have been unable to actively develop pChess 	** for some time now, due to the difficulty which a medical condition known as 	** cervial dystonia which renders typing difficult, and even focusing on the 	** screen to examine code reqires an enourmous effort of will.  :-(		** it has been sheer torture to want to continue to develop pChess, while being	** incapacitated and unable to type. this entry here is due only to sheer will. 	** therefore it is with great gladness that today i am able to make at least 	** one update to the code. :-)		july 25, 2011	> JRP: updated 'Quartz.incl' from 1.11 to 1.12. 	august 2, 2011	> JRP: longingly looking at code, and wishing i could code. :-( 	cleaned up this changeLog. :-\august 11, 2011	> JRP: dr. steeves at st. michael's hospital has treated my dystonia	with botox injections. help and hope is on the way.. prayers and grief. august 15, 2011	> JRP: FIND:BUG: the king evaluation sucks when peaBrain castles o-o-o from	this position: r1bq1rk1/pp1nppbp/2pp1np1/6B1/1PPP4/1QN2N2/P3PPPP/R3KB1R w KQ	papa nailed peaBrain after that. got to fix kingSafety Eval. 	FIND:BUG: peaBrain should NOT castle from the following position (and lose Bishop!!): 	rnbqkb1r/pp1p1ppp/2p2n2/1B2p3/4P3/5N2/PPPP1PPP/RNBQK2R w KQkq	- score: 134	- move bishop to c4, score: 155	- castle, score: 281 (and with _eval04castleBonus = _false, score = 131)	FIND:BUG: the HINT feature uses the version 1.7 of FN computerSearch(). 	it shoud be adapted to use the 1.8 search (which no longer needs to be	passed the root moves, but rather generates its own. follow the code	already rewritten for FN computerMove(), and all should be good. august 22, 2011 (1.8beta7)	> JRP: neck is holding still enough that with an effort of will, 	i can programme again for the first time since may.. peaBrain has been 	languishing, and today, after five hours, itterative deepening is 	functioning but broken. after a swim across long lake, it iz time to 	track some bugz.. yeehah!! :-) 	> JRP: major rewrite of FN computerSearch() to use Iterative Deepening, 	and this was modelled on RChess' Iterative deepening and hash tables. 	it seems this implementation is working, but broken. :-( 		test results for: rnbqk2r/p1pp1ppp/1p3n2/2b1p3/2B1P3/2N2N2/PPPP1PPP/R1BQK2R w KQkq	pChess 1.7 depth 7: Nxe5, time: 09:36, hashUsed: 21322	pChess 1.8 depth 7: Na4, score 0, time: 02:06, hashUsed: 21091)	thus, because of useless 0 score move, i think there is something wrong. :-( 	in declares.incl, set the constant _ideep to _true to enable (broken) 	Iterative deepening. i am declaring this to be the return of peaBrain 	(long lake edition). august 23, 2011	> JRP: added 'hash' command to FN parseMove(). also, if _showHash is _true 	in the declares.incl, then it will show the hashCode as you step through moves. 	august 26, 2011 (1.8beta8)	> JRP: having trouble debugging low scores returned by Iterative deepening,	so went back and added a simple FN dispCapturedPieces() to the debug screen. 	find: remember to convert setRect() and paintRect to Quartz (and in history too!)	this will all go away when we rewrite the whole UI as a skinnable cocoa app. september 14, 2011	> JRP: rewrote FN fromFEN() to support setting the enPassant square. 	the function now also uses modern references to FN getWords(). 	FEN: 8/7p/p5pb/4k3/P1pPn3/8/P5PP/1rB2RK1 b - d3 0 28	and Pawn at c4 now has 2 possible moves. :-D 		> JRP: rewrote FN toFEN() to support setting the enPassant square. 	this means we can now both load and save enPassant information in FEN. 	Robert: Black should be able to play cxd3e.p. but pChess doesn't allow it: 	FEN: 8/7p/p5pb/4k3/P1pPn3/8/P5PP/1rB2RK1 b - d3 0 28	sepetember 17, 2011	> JRP: robert purves sent suggestions on how to get Iterative deepening working!!	the FN putSUppliedMoveFirst() corrupted the moveList, and gave wrong results. 	the FN computerSearch() is now completely rewritten, and seems to be working. 	hash tables are currently enabled, but not necessarily to be trusted. 		FEN: rnb2r2/pp1p1pkB/2q1p2b/2p5/8/N1P1PN2/PPQ2PPP/R4RK1 b - -	pChess 1.7 depth 6: f5 (score 214; time 09:39)	pChess 1.8 depth 6: f5 (score -12; time 01:15)		FEN: rnb2r2/pp4k1/2qpp2b/2p2p1B/8/N1P1PN2/PPQ2PPP/R4RK1 b - -	pChess 1.7 depth 6: Nd7 (score 170; time 10:10)	pChess 1.8 depth 6: Nd7 (score -41; time 08:12)		FEN: r1b2r2/pp1n2k1/2qpp2b/2p2p1B/8/N1P1P3/PPQN1PPP/R4RK1 b - -	pChess 1.7 depth 6: Qa6 (score 124; time 13:20)	pChess 1.8 depth 6: Qa6 (score -56; time 04:13)	> JRP: enable the new constant _devLog to enable a debug trace on the search. 	currently shows: Depth, Alpha Cut-offs, and Eval. Scores. september 20, 2011	> RP: robert found a bug in FN quiescenceSearch(). the patScore was inverted: 	patScore = fn staticEval(board) // was -fn staticEval(board)	this required a corresponding change in the FN negaSearch() such that	alphaScore no longer should negate the incoming value from FN quiesenceSearch(): 	alphaScore = fn quiescenceSearch()	play seems improved after the fix, although the scores still vary by more than 	I would expect at the start position. [RP]	> JRP: In display.incl, added a test in FN cheqOverlay() to see 	if moves.fromSquare(0) = _noSuchSquare -- this avoids displaying a non-move. 	we also needed to create dummy non-moves for gMoveList(0) in FN initClassic()	fn initFischer(), and fn fromFEN() 		> JRP: removed the (unused) fudgeWiggle factor from eval.incl. 	no more muuddle_fuddle :->		> JRP: added a bishopPairScore evaluator to FN staticEval(). 	the current weight is: _wtBishopPair = 40 (the default piece weights	already differ by 10 centipawns, and it is recommended that the bishop pair	is worth a full half pawn (i.e. 50 centipawns)). 	// The bishop pair has an average value of half a pawn. 	// (GM Larry Kaufman, The Evaluation of Material Imbalances, Chess Life, 1999)	> JRP: added _version$ to saved game headers (fn saveGame()). september 24, 2011	> JRP: pChess 1.8 beta 10 was entered into the 2011 toronto island chessfest	today.. and WON the tournament!! woohoo -- way to go peaBrain!! :-) september 30, 2011	> JRP: in eval.incl, i separated the positionalScore from the materialScore. 	by outputting the positionalScore in the console, it became apparent that 	many positional scores were scoring ~200-300 centiPawns.. part of what i believe	is causing the occasional trading of a pawn for a bishop (!!). I NORMALIZED 	THE POSITIONAL VALUES TO A MEDIAN OF ~160 CENTIPAWNS BY DIVIDING THE EXISTING	POSITIONAL SCORE BY 2 -- this comes at the cost of some subtlety.. as scores 	that differed by only 1 point now score the same. however, it should avoid the 	bigger bishop/pawn blunders now. ultimately, i need to adjust the positional 	factors so that this division by 2 isn't necessary, but for now, it quickly 	provides an improvement in the raw scores. now i need to empirically test 	it against the EPD test suite. 		> JRP: modified FN dispPieceTree() to show only legal moves for a piece. 	previously, it would show all moves for a piece whether they were legal or not	(i.e. if the king is in check, some pieces lose their ability to move). 	> JRP: updated FN hintMove() to reflect changes in FN computerMove()	> JRP: modified Depth menu to go to 9. october 4, 2011	> JRP: _evalKingSafety was checking the wrong squares. :-( 	it was checking: 1 should be 2; 5 should be 6; 57 should be 58. 	fixed. also, it now checks both queenSide squares for the bonus. 		> JRP: removed the numbers from the _evalConstants in declares.incl	> JRP: CASTLING PAWN SHELTER added. peaBrain would castle queenside instead of 	moving the pawn to e3 like a sensible pea. so we needed to write a king safety 	eval to account for this. :-\ 	FEN: rnbq1rk1/pp3ppp/2p2b2/3p4/Q2P4/2N2N2/PP2PPPP/R3KB1R w KQ -	- with _castleBonus, it did the exposed castling (score: 102)	- sans _castleBonus, it did the right thing: pawn to e3 (score: 107)	thus, we should not give the bonus if the available castling side 	is missing a protective king pawn. 		but this is not so easy, because we simply give the bonus if side has castled. 	so what we do now, is give the bonus: i) if castled, and not on square 2 or 6; 	ii) castled, on square 2, and pawn on square 10, or.. 	iii) castled, on square 6 and pawn on square 14. 	that should make it so you only get the bonus if you castle behind a protecting pawn. 	but, you will still get the bonus if you have subsequently moved the king. 	it just makes for a hairball of a conditional test: ( (A+B+C) or (A+D+E) or (A+F+G) ). 	however -- now it won't lose the game because of a stupid move. :-) 		this code was hard to actually get working, because it never seemed to correctly 	identify the king square as being in the default castling locations, and it 	seemed my boolean logic was correct (it was!). debugging revealed a signicant 	bug elsewhere in the evaluation. tracking the state of the variable by 	printing the kingSq in the console revealed that it was always returning 0. 	a search and replace revealed the reinitialized variable (after it had been 	found and identified correctly) -- and thus the pawn shelter for castling, 	and the target for king gravity both work now. :-}  		so all this time, the target was fixed on the corner of the board instead of 	on the enemy king -- post a big 'dead' sticker on this bug's forehead.. duh! :-( 	at least we found it. how did pea even manage to win anything at all!?!? :-p 		> i'm calling it release 1.8, and branching off to 1.9 to start the UCI code. :-)>> pChess 1.9october 5, 2011	> JRP: 	- added _buildAsUCIengine to declares.incl; this will determine UCI build status. 	- conditional coded all of: pChess.bas and display.incl > first split of GUI code. 	- added a new MAIN: peaBrain.bas, which contains most of pChess, and includes the code 	  from pseudoEngine.command > this will contain the new engine. :-} october 12, 2011	> JRP: since posting pChess 1.8 on chess.com on october 4th > 1179 downloads/8 days! :-)	october 13, 2011	> JRP: there's an evaluation bug!! new board static score = 5!?!? WTF!?!? :-( 	FEN: 8/pppppppp/8/8/8/8/PPPPPPPP/8 w KQkq -		alright -- two hours of investigation showed that gWhitePawnTropism(z) was 	correctly initialized, but gBlackPawnTropism(z) was not, because i had accidently 	stuffed the values into gBlackKnightTropism(z) instead -- a typo fixes it!! :-) 	> JRP: when the user makes a move, it displays a staticScore. however, this	is not so useful, because it will appear to give a good score to a bad postition	if the position has unrecaptured pieces hanging. so we changed this; we now use	the quiescent score instead of the staticScore to rate user moves. 	old: score = FN staticEval(gBoard)	new: score = -fn quiescenceSearch( gBoard, -_infinity, _infinity, gDepth )october 14, 2011	> JRP: another milestone - pChess is now become peaBrain (i.e. a chess engine 	without a gui). this is the first game played in another gui - peaBrain 1.9 beta 0 	loaded into sigmaChess. peaBrain quits after 45 halfMoves due to str255 limitations.. 	thus, much more work to do.. :-p  (oh.. did i just forget to sleep tonight..!?!?)	coming to you live from bradford harbour. 		--| peaBrain sample log |----------------------	uci	isready	ucinewgame	isready	position startpos moves e2e4	--|internal board updated with move: e2e4|-----	go btime 120000 movestogo 59	> bestmove e7e6	position startpos moves e2e4 e7e6 d2d4	--|internal board updated with move: d2d4|-----	go btime 115000 movestogo 58	> bestmove d8h4	[*** peaBrain quits after 23 moves due to str255 limitations ***]	quitoctober 27, 2011	> JRP: the only way to get around the str255 limitations is to create 	our own stringBuffer handling code -- thus, a new global declaration: stringBuffer. 	added several functions to peaBrain.bas: bufferLineIndex(), bufferCharIndex(). 	these allow us to linearize stringBuffer access. this function is imperitive 	in order to handle long UCI position commands. in the future, it will be this	that also enables us to handle long pgn strings. 	> JRP: added new function: midBuffer(). this allows us to reach in and grab 	str255 strings out of the string buffer just like the mighty mid$() function	we all know and love. :) 	> JRP: added new function: getBufferWords( stringBuffer, start, length ). 	this allows us to grab all the words out of a string buffer as easily as if 	we were grabbing them out of a str255. this makes dealing with long position	strings so much easier!! 	> JRP: the main UCI command loop has also been updated to support 	loading position strings into a stringBuffer. 	> JRP: added new function: setupPosition( UCIcmd as ^stringBuffer )	this allows us to setup the long UCI position strings (>255 chars!). 	october 28, 2011	> JRP: added support to the main UCI command loop to examine the	UCI position command, and setup the board from both 'startpos' (sigma chess), 	and from a FEN string (stockfish). we needed to handle both these cases	if we wanted to be compatible with the UCI interfaces that are out there. 	> JRP: added a new function: infoToGUI() which is called from within 	computerSearch() and negaSearch() -- it is conditionalized to call only	from the UCI version of pChess. 		> JRP: with all these changes, it seems pChess is now able to play UCI games!!	i rest tonight with a happiness and satisfaction that has been long in coming.. :-}		> JRP: one bothersome bug though: UCI will hang if i disable the pChess.log. 	can it be that somewhere a print command doesn't terminate with _LF$ !?!?!?	> JRP: btw, chess.com reports 2700 downloads of pChess 1.8.. woohoo!! :-D 	> released as: pChess 1.9 UCI on chess.com	october 29, 2011	> JRP: fn getBufferWords used the opening book limit: _maxMoves (set to 99). 	this caused peaBrain UCI to crash after a hundred moves with an array 	out of bounds error. this is now switched to _maxUCImoves (set to 512); 	a more reasonable limit. november 3, 2011	> JRP: adjusted the moveScore in FN infoToGUI() to 10x (measure in CENTIPAWNS). 	also adjusted the value sent for the hashTablePercent to scale more reasonably. 		> JRP: we now return more useful info in the pChess.log file. 	november 7, 2011	> JRP: removed fn infoToGUI() in FN negaSearch() #if (_buildASUCIEngine)	it was 'spamming the GUI' with info overload. 		> JRP: removed the fn infoToGUI() that was located after alpha > highScore	in iDeep version of FN computerSearch(), and added fn infoToGUI right after 	the negaSearch() call; moves(moveIndex). 		these two changes result in more meaningful info being sent to the UCI GUI. november 11, 2011	> JRP: the UCI specifications sez: Directly before [bestmove], the engine 	should send a final 'info' command with the final search information. 	Therefore, in the iDeep version of FN computerSearch(), we pass a final info 	string after the final moveIndex, with moves(0) instead of moves(moveIndex). 	> JRP: reduced the default hash table size from 256Mb to 64Mb. this shouldn't	make a substantial impact on speed, but significantly reduces the memory footprint. 	takes it down from ~270Mb RAM to a more reasonable (?) 70Mb. 	> JRP: FN makeMove() didn't hash the change in side-to-move (i.e. half of 	all of the moves!!) this is a serious lack of hash utilitaziton). 	hashing side-to-move is done by NOT(board.hashCode), changes makMove(): 		 board.who2move = -board.who2move	 board.hashCode = not( board.hashCode )   // hash change of side	 board.halfMoves++	thus -- the hash sholud be 1/4 the size, but quadruple as useful. :-) november 15, 2011	> JRP: removed the barnacle that is battle.incl, which gets rid of that	cruft that are: FN loadBattle() and FN tournament(), with corresponding 	removal of the 'load battle', 'battle' and 'tournament' keywords from 	the parser. 		> JRP: removed the boardRecord field .capturedPiece	(it wasn't even used!)	the whole thing is so useless now that we support UCI protocol. :-D 	all those battle variables too -- removed the whole schebang. 		> JRP: added UCI time controls by parsing the UCI subCommands for 'go'. 	subCommands supported: wtmime, btime, movestogo, movetime, depth, infinite. 	FN SetUpPollForCommand() was already initialized, but for time control, we	also needed to use FN SetupPollTime2() -- using a formula provided by RP: 	timeLimit = timeLimit*95/100/movesToGo  //time in microSecondsnovember 17, 2011	> JRP: added ghosted (i.e. uncaptured) pieces to the captured pieces display. november 21, 2011	> JRP: changed the method of quitting peaBrain > ExitToShell()		> JRP: added nps (Nodes Per Second) to the info sent to the UCI GUI. 	every time UCI makes a move, gUCItime is reset to current sysMillisecends. 		> JRP: added the ability to use an opening book with the UCI engine. 	use: UCI setoption Book = true. 	november 22, 2011	> JRP: ready to ship out the new version.. final testing shows that	all the evaluations are coming up with scores of zero..!+!+ WTF!?!?	okay.. so an hour of searching shows that when we exorcised the battle	variables, we also deleted assignment of the global variables for evaluation!!	this bug has now been fixed, and we can safely ship 1.9.2.. wheh!! @:-O	> JRP: with time management, and the UCI move limits and eval bugs fixed, 	it is time to declare version 1.9.2, and release. next stop.. better HASH!! :-D>> pChess 1.9.3november 27, 2011	> JRP: created a new icon for pChess.. translated into .icns file (w/transparency)	the style of the new icon gets us ready for the iOS version of pChess!! :-D november 28, 2011	> JRP: fixed a bug: peaBrain was not responding to isready after a position command, 	causing the engine to stall in cutechess-cli -- i had forgotten to add the line: 	print "readyok" + _lf$;  after fn setupPosition(UCIcmd) in the 'position' command. 	i'm so embarrassed, i spammed the master with dual copies when i was tired & weary	from programming all night getting 1.9.2 UCI ready, and how can i show my face in 	new zealand if my hash tables aren't even working properly yet..!?!? 8-p december 23, 2011	> JRP: bug report: during UCI queen promotion, it does not append a 'q'	to the algebraic move string -- we will need to add code to support this (DONE). january 27, 2012	> JRP: the last month spent time learning C++ in preparation for port to iOS. 	total rewrite from scratch -- so far, pea.011.cpp in C++ is what we had in 0.8.0!!	thus -- year number three -- rewrite number three -- from scratch!!! :-p 	> also, i found an old G3 iMac white alien egg kind o thing. i set it up 	with OSX 10.4 (via firewire target mode). made the whole thing to run audioBrain,	sent the audio output into the input of garageband on the MacBook Pro, and ran	some loops and effects processors on it, and recorded an experimental musical piece 	called 'Depth 8' - music made by the the sound of a chess programme processing. :-)		> _buildPPC = _true | the above considerations for using an older G3 iMac 	for a musical art installation gave me reason to set the build paramaters 	back to: gcc 4.0 with minimum deployment set to OSX 10.4. 	(requirement for 10.5 came from embedding the CHEQ font). 	the compiler switch _buildPPC = _true will bypass all the font embedding	code (and require manual installation of the CHEQ Font in /Library/Fonts). 	but what it gets you -- is you can run 1.9.3 on OSX 10.4 on a G3 iMac.. :-)		changed files: display.incl; declares.incl; and pChess.basjanuary 28, 2012	> JRP: fixed the UCI queen promotion bug. in computerMove(), added: 	if (gPromotion == _true) then moveStr = moveStr + "=Q" as per the	UCI specification. >> pChess 1.9.4february 3, 2012	> JRP: added FN notDot() to pChess.bas. 	this is used by the rewritten FN fileOpen() to determine 	if a word in the .pgn input stream is a move number (1. 2. 3. etc)			> JRP: adding the ability to load regular .PGN files.. (single game only!)	rerote the code in: pChess.bas > FN openFile(); added FN notDot() 	which returns _true if there is no period character in a string. 			previously, it would read one move per line, ignoring the 0th item, 	and reading the 1st and 2nd elements as moves. the heuristic now reads 	multiple words per line, ignoring any word with a period in it, and 	accepting the rest as the move sequence. this both increases reliability, 	and allows backward compatibility to writing one move per line (which 	i find more humanly legible, for example, when emailing games). 	february 6, 2012	> JRP: pChess now displays the last move when loading games 	(thar ya go brendan!)	february 9, 2012	> JRP: PGN info displayed in window header. to facilitate this, a new 	record type was added: gameRecord - which stores the PGN file info. 	based on this, info loaded from a PGN file is now retained, and the current	white and black players names are displayed in the window header. 	this affeced: FN openFile(); saveFile(); init_classic(); init_fischer(); 	and FN fromFEN(). new FN resetPGN() - to zero out PGN info during new game. february 10, 2012	> JRP: SPEED OPTIMIZATION: 30-40% i noticed that RP got faster execution 	times by turning off the 'Check Array Bounds' in the compiler settings, 	and using gcc 4.2 -- i thought i should try this too -- it works!! 	at a depth of 7, the following position took 1:31 to find the move with 	Bounds Checking ON,	and running the same position with Compiler Bounds 	Checking OFF took 1:06!! it means we can run things at one more level 	of depth -- more speeed. :-} 	> JRP: put some smarts into FN saveFile(). if user enters a: AAA vs BBB	string into the edit field before save, it will grab the info for the PGN 	strings, and stuff them into gGame.white and gGame.black -- entering: 	AAA will return "AAA vs pea', and entering: vs BBB, returns 'pea vs BBB'. 	this saves a bunch of extra typing when saving games. 		> JRP: got rid of the turd in FN checkTest(). 	we now do it with the much faster FN isSideToMoveInCheck(). 	i believe this also got rid of a false-positive king is in check bug. :-)february 11, 2012	> JRP: added ability to generate Fischer FEN strings in FN toFEN()	e.g. FEN: bnrknrqb/pppppppp/8/8/8/8/PPPPPPPP/BNRKNRQB w Fc -		this involved some changed to the boardRecord, and the use of gameRecord	types. when a fischerGame is initialized or loaded (via PGN), we have 	added a boolean to the boardRecord called 'fischer' - and if this is _true,	then we must also supply a FEN string in the gameRecord.gameFEN -- which	we pass globally through the variable gGame.{date|site|result|gameFen|etc}		also, in the parser, the 'black' cmd sets the black PGN info; 'white' does too. 	the 'info' command will list the black and white players. typing AAA vs BBB	in the edit field before saving, will set these options as it goes to save. :)	february 12, 2012	> JRP: updated FN makeMove(), added a select-case switched on pieceType for 	king castling and pawn enPassant moves. FIND: still need to add hash code	for these two cases (!!). 	february 17, 2012	JRP: fixed a bug in FN toFEN() where it reversed the outputs f and c. :)		> JRP: updated FN fromFEN() to read fischer castling rights from a FEN. 	this is tricky, since when the designator (e.g. a singular 'e') is given 	in the castling-rights string in isolation, it produces an ambiguity -- 	for depending on if it is to the A-side or H-side in respect to the king, 	it would denote either A-side or H-side castling rights. an error in this, 	would be a BUG.. and give erroneous play.. aaagh!! so i determined that 	for these four little bytes, we needed at least a two pass approach: 	i) determine where the king and rooks are with respect to each other; 	ii) flag the castling rights as such given the arbitrary FEN flags. 	this approach finally yielded the correct result, and with greater 	reliability. it even deals with stockfish erroneously producing 	out-of-order fischer castling flags (e.g. HEhe instead of EHeh). 	since this is called from FN openFile(), we can now read fischer PGN 	castling flags. 	FIND: ENDGAME PAWN TROPISM. in playing live games with pea, i have noticed 	that at the end, when it is all pawns, it doesnt make any effort to get 	its pawns off the home row while the enemy develops steadily and wipes 	him out. this was demonstrated in a game against geoff currie at the 	toronto island chess club in january 2012. he stormed the castle, 	while pea just waffled its king instead of developing its castle pawns,	and ended up dying miserably. 		pondering solutions for the situation leads me back to pawn tropism. 	it is effective in the early and midgame, but is detrimental for the	endgame, as it gives slightly negative values for pawns to leave 	the home row. 		therefore, i need to add an endgame pawn tropism that activates 	when a threshold of pawns/major pieces is reached. i will probably 	code this into the eval when i have time. as capablanca has noted: 	A Passed Pawn increases in strength as the number of pieces 	on the board diminishes. (Capablanca) February 18, 2012	> JRP: made a change to FN cheqBoard() such that if (board.fischer) is set, 	the axis letters 'C' and 'G' are replaced with a small KING icon denoting	the valid castling squares (which may not be obvious in fischer chess). 		> JRP: fixed a small display bug when rotating the board. however, 	it comes at the expense of a small flicker as the board flips. 		> JRP: minor fix, ghosted capture pieces are now a shade lighter.. :-pFebruary 19, 2012	> JRP: updated the move generator FN wKingMoves(); bKingMoves(), 	and FN makeMove() to support Fischer Castling!! :-)  so far, 	this is only for the GUI version, we still need to updated 	the UCI version to fully support fischer castling. you castle	in a fischer game by capturing your own rook (i.e. move your 	king to castle the rook with which you want to castle). 		> JRP: updated FN move2Std() to account for fischer castling. 	otherwise, it would report a self-capture instead of a castling move. 		FIND: NOTE! the evaluation FN currently evaluates only classic castling. 	until we rewrite the castle eval, it may sometimes play a poor 	castling move (or fail to do so) during a fischer game. >> pChess 2.0February 20, 2012	> JRP: with the advent of fischer castling, PGN files, and more speed, 	i've decided there has been enough of these incremental 1.9.x updates, 	and time to say that we've reached version 2.0. there are still some	things that need doing - and i'm going to save these for v2.1 - they 	are: i) update UCI engine such that it abolishes gBoard, gDepth, and book	like robert purves said. ii) update UCI engine with latest changes 	from GUI 1.9.4; iii) get HASH working properly; iv) repetition detection;	v) endgame pawn tropism; vi) better fischer castle evaluation. 	February 21, 2012	> JRP: all the changes made for fischer castling in pChess.bas 	must also be done in the peaBrain.bas for UCI. to this end, i've	updated the following FNs: fromFEN(); toFEN(); newClassic(); 	newFischer(), and the main UCI command loop. 		> added a new command from peaBrain in the UCI init code: 	option name UCI_Chess960 type check default false 	this means that a UCI GUI such as cuteChess will now recognise 	peaBrain's fischer capability. also, i downloaded cuteChess CLI, 	and verified the bug fixes since 1.9.3. fischer castling was 	confirmed, and games were successfully played in: cuteChess, 	sigmaChess, and stockFish. 	> JRP: there were a bunch of print #99 command logs in peaBrain.bas.	however, we hadnt conditionalized them with: #if _LogCommandsReceived	and so it would crash if we tried to compile UCI without a log. 	now it should respect log behaviour. 		> JRP: there was a lot of useless crud, like includes for GUI prefs,	and unused commands in parseMove(), and these have been removed.. 	and we should probably get rid of even more if we're going to be able 	to show this code to purves without having to duck and waver for	submitting such a rickety racket for him to look at.. :-p march 23, 2012	> JRP: disable the 'Move' button during the computer's move. 	BUTTON #1, 0 -- this avoids the case where the user double-clicks 	the move button (or taps it repeatedly due to latency on a VNC connection	when you're playing from the iPad), and the first click makes a move, 	and the second click makes a second move which is initiated while the 	first move is still in progress, and renders a broken result. the user 	shouldnt be double-clicking the MOVE button anyway, but users always do 	the wrong thing given the chance to do so. 	> JRP: after a fischer game, if you play a classic game, 	the opening book remained disabled. now it is reenabled 	when a classic game is started. may 16, 2012	> JRP: removed depreciated variable: gWtMobility. this was found	as i was porting the eval code for pea3. it wasnt actually used. 	> changed the forced move peaCmd from m to > to match the new	syntax in pea3. thus: >e2e4 does a forced move (instead of me2e4). 		> JRP: updates on pea3 port.. we have completed a simplified 	move generator, eval, and are working on legal move generation. 	working on the negacracker now.. first recursion should be soooon!! :-D	june 5, 2012	> JRP: at brendan's bidding, added ability to drag and drop 		to open files into pChess (we've never declared our own filetype). 	- changed the info.plist to contain 'Document types' public.plain-text.	- added: ON FinderInfo FN openFile	- rewrote FN openFile() to handle finderOpen events. 		FIND: this, however is fraught; as it still accepts internal user cancel; 		but the boolean i am feeding to it switches it to accept finderFile,		or a user-selected file with file$.. great; but on FinderInfo can		assert only an imperative with no return type - and we used to return		an OSStatus type from openFile. because i suspect the compiler does		an implicit return (void), this works out, as the default type is _false		yet i feel the better way would be to isolate it properly, and if this		starts in any way showing bugs or crashing upon loading, i shall have		to point the: ON FinderInfo.. to an intermediate function, which calls		FN openFile() with the boolean 'false' imperitive, that triggers 		finderOpen within the routine. july 30, 2012	> JRP: while porting the attackMoves generator to pea3, i noticed that 	the .toSquare in the wPawnAttacks() -> pawn enPassant-West was set 	to: testSquare. while this is true for all other wPawnVect(0..5) 	conditions, it is not true of enpassant, because the enPassant capture 	square and destinations squares are not the same, and in pawnMoves, 	we had set it to: querySquare+7, but we had not done so in attackMoves. 	likewise, this had to be done for enPassant-East, and the attacks	.toSquare should NOT be testSquare, but rather set to be: 	querySquare + 9. this subtle bug is now fixed. rinse and repeat 	for bPawn enpassant generation. :-) 	> JRP: robert purves' suggestions for optimal builds (note!! this does	NOT WORK with Quartz.incl deprectiated pointer instead of struct!! 	1. set 'Optimization' to Fastest	2. set 64-bit mode by putting -m64 in 'More compiler options'	3. for Core i5 and i7 CPU, append  -DHAS_POPCNT  to 'More compiler options'	4. for best clang build, 'Source-file combining' OFF, and use: -flto. 		More Compiler Options: -m64 -DHAS_POPCNT -fltoaugust 26, 2012	> JRP: upgraded from OSX 10.7.3 to OSX 10.8.1, and XCode 4.4	(with the optional Commandline Tools dowwnload in the Organizer). 	> JRP: upgraded futureBasic 5.7.2 to 5.7.4. 	> JRP: Recompiled the whole shebang for compatibility OSX 10.8.1 	Mountain Lion, and gcc 4.2. Yahoo Sugarplum. :D august 30, 2012	> JRP: pChess.bas; peaBrain.bas; in both cases, FN fromFEN()	contained an error in which board.bCastleQside = _false was never set	(copy/paste error: board.bCastleKside = _false occurred twice!!). 	in rare cases, this could cause fischer games to incorrectly disallow 	black queen-side castling. november 10, 2012	> JRP: Quartz.incl 1.12 generates a compiler Warning: deprecated use 	of pointer as argument where a record is expected in line 504 	of Quartz.incl: 	Peter Boyle on the futurebasic mailing list: change the: r as ^CGRect	over to: r as CGRect.. this fixes the problem for FB 5.7.4 and onwards. 	| I have found that under FB5.5.1 one needs the pointer	| local fn QuartzRoundedRectPath( ctx as CGContextRef, r as ^CGRect.. )	| 	| FB 5.7.4: local fn QuartzRoundedRectPath( ctx as CGContextRef, r as CGRect.. )	| 															     ^ no pointer	| Regards, Peter A Boyle (MBS Steel, Brampton)	this has allowed us to begin using the -flto clang compiler option	as recommended by the late and great r.purves.. april 13, 2013	> JRP: found a bug while porting the fischer initialization code, 	that spaceCount was sometime misspelling with no intercap (e.g. spacecount)	now all instances are corrected to read as: spaceCount. june 13, 2013	> JRP: names for the ECO openings in peaBook.txt were excessively long. 	spent seven hours editing 2502 lines, and removing names consisting of	different strings of moves. since the names are now about 60% shorter 	on average -- this should also improve book load speed. 2500 lines of	names accounts for about 40k of extraneous title text.. still have 7000	lines to go... :-pjune 14, 2013	> JRP: opening book edits	- 6709 openings edited; 3000 to go...june 15, 2013	> JRP: 10,400 opening edits (DONE!!)	- all those opening book names -- FIXED!! hours and hours and hours. 	- this has the additional advantage of feeding back to pChess 2.0, 		since they use the same opening book file, i'm updating pChess 		to version 2.0rc8 (with the edited opening book). 	- old opening book size: 1,082,557 bytes	- new opening book size: 921,687		> JRP: opening book now matches Chess Meister 0.7.0. 	+ compiled new version: 2.0rc8october 30, 2014	> compiled under OSX 10.9 and FB 5.7.6	- pChess.app	- pChess.command	> pChess 2.0 uploaded to chess.com	http://www.chess.com/download/view/pchess-20		| UPDATE OCT.26.2014: The peaBrain engine that powers pChess is now 	| available on the iPad!! CHESS MEISTER for the iPad is ready for Christmas 2014. 	| 	| Check it out: CHESS MEISTER for the iPad: 	| https://itunes.apple.com/us/app/chess-meister/id928343910?ls=1&mt=8november 21, 2014	> JRP: removed ' in opening book: 	{ C27 Vienna: Adams Gambit } 1.e4 e5 2.Nc3 Nf6.. }*/